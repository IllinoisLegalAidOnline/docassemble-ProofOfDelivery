metadata:
  title: Proof of delivery
  short title: Proof of delivery
  comment: This program helps you prove that you sent a copy of a court document to the other parties in a court case.
  authors:
    - Matt Newsted
    - Vivian McNaughton
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
---
objects:
  - users: ALPeopleList.using(there_are_any=True)
  - users[i].lawyer: ALIndividual
  - users[i].jail_delivery_address: ALAddress
  - other_parties: ALPeopleList.using(there_are_any=True)
  - other_parties[i].lawyer: ALIndividual
  - other_parties[i].jail_delivery_address: ALAddress
  - delivery_parties: ALPeopleList.using(there_are_any=True)
  - delivery_parties[i].lawyer: ALIndividual
  - court_list: ALCourtLoader.using(file_name='docassemble.ILAO:data/sources/il_courts.xlsx')
---
code: |
  al_form_type = 'existing_case'
  ilao_easy_form_title = "Proof of delivery"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/legal-information/proof-delivery"
  form_name = "Proof of delivery"
  github_user = 'IllinoisLegalAidOnline'
  github_repo_name = 'docassemble-ProofOfDelivery'
  allowed_courts = ['Circuit']
---
# Road map
sections:
  - section_intro: Start
  - section_case_info: Case info
  - section_parties: Parties and delivery
  - section_about_you: About you
  - section_download: Download  
---
# interview order block
mandatory: True
code: |
  nav.set_section('section_intro')
  sees_nav_bar
  snapshot_start
  how_to_use
  set_progress(5)
  whats_next
  accept_terms
  
  set_progress(15)
  nav.set_section('section_case_info')
  document_name
  user_ask_role
  users.gather()
  set_progress(30)
  other_parties.gather()
  if in_re_check == True:
    in_re_label
  trial_court
  set_progress(45)
  case_number

  nav.set_section('section_parties')
  set_progress(60)
  delivery_intro

  for person in delivery_parties:
    if person.is_represented:
      person.lawyer.name.first
    if person.knows_delivery_method:
      person.mail_delivery
      person.delivery_date

  hand_delivery_info

  set_progress(75)
  nav.set_section('section_about_you')
  users[0].address.address
  users[0].phone_number
  e_signature

  set_progress(100)
  nav.set_section('section_download')
  forms_assembling
  snapshot_forms
  get_docs_screen

---
code: |
  stuff_to_snapshot = {
  	'start_time': str(current_datetime().format_datetime()),
  	'started_interview': True, 
  	}
    
  try:
    stuff_to_snapshot['ip_address'] = device(ip=True)
  except:
    pass 
   
  stuff_to_snapshot['user_zip'] = showifdef('users[0].address.zip')

  stuff_to_snapshot['downloaded_forms'] = showifdef('forms_assembling')
  
  stuff_to_snapshot['user_role'] = showifdef('user_ask_role')
   
  
  store_variables_snapshot(
  	data=stuff_to_snapshot, persistent=True
  	)
  snapshot_interview_state = True
---
code: |
  snapshot_interview_state
  snapshot_start = True  
---
code: |
  reconsider('snapshot_interview_state')
  snapshot_forms = True
---
id: welcome
question: |
  Proof of delivery
subquestion: |
  Welcome to Illinois Legal Aid Online's **Proof of delivery** Easy Form.

  This program will help you prepare forms to prove that you sent a copy of a court document to the other parties in a court case.
  
  You must send a copy of the document to the other parties in the court case anytime:

  * You file a document with the court, or
  * The judge sends or gives a court order only to you.
field: sees_nav_bar
---
id: instructions
continue button field: how_to_use
question: |
  Instructions
subquestion: |
  To use this program you will need: 

  * Names and addresses of the other parties, 
  * Names and addresses of the other parties’ lawyers, and 
  * The court case number. 

  You can find this information on other court papers you have about this case. 

  Set aside 5 to 10 minutes to finish this program. You can log in and save your work to continue later. 
 
  ${ collapse_template(help_example) }  

  Click on **{green words}** to learn what they mean. Some questions have a question mark in a circle ${ fa_icon("question-circle", color_css="#0dcaf0" ) } that also gives help.
---
template: help_example
subject: |
  **You can expand sections like this to show more information.**
content: |  
  This is an example of help. Click again to hide.
---
id: whats next
continue button field: whats_next
question: |
  After you finish this program
subquestion: |
  After you download your *Proof of Delivery*, you must file it with the court. This program **does not file** your forms for you.
  
  Read the "How to Send a Court Document to Other Parties" instructions you can download at the end of this program. 
---
id: user name
sets:
    - users[0].name.first
    - users[0].name.last
    - users[0].name.middle
    - users[0].name.suffix
question:  |
  What is your name?
fields:
  - code: |
      users[0].name_fields()
---
id: in re check
question: |
 Does the court case have the words "**In re:**" in the name?
subquestion: |
  Look at the name of the case at the top of the court papers. "In re" is often used in probate, guardianship, and some family law cases. For example, a probate case regarding Jane Doe's estate might be called "In re: Estate of Jane Doe."
  
  **Note:** If the court papers say "In re:" but also list the names of people in the case, you can select **No**. For example, if the case title is "In re: Marriage of Julia Smith and Tony Smith," the names you already entered will be put on your forms. 
fields:
  - no label: in_re_check
    datatype: yesnoradio
---
id: in re label
question: |
  What does it say after "**In re:**" on the court papers?
subquestion: |
  For example, the case could be called "In re: The Will of Elena Black."
fields:
  - In re:: in_re_label
    maxlength: 50
---
id: document name
question: |
  What is the name of the court documents you are sending to the other parties in the case?
subquestion: |
  The name is usually found in the top part of the first page of the court document. Examples include **Court Order**, **Answer to Discovery**, or **Motion to Dismiss**.
  
  If you are sending more than one document, separate them by a comma.
fields:
  - Name of court documents: document_name
    input type: area
    rows: 3
    maxlength: 90
  - note: |
      The form has room for about **90 characters** including spaces.
---
id: any other users
question: |
  % if al_form_type in ['starts_case','existing_case','appeal']:
  Is anyone else on your side of this case?
  % else:
  Is anyone else adding their name to this form with you?
  % endif
subquestion: |
  % if len(users.elements) > 1:  
  So far you have told us about ${users.full_names()}.
  % endif  
fields:
  - "Anyone else?": users.there_is_another
    datatype: yesnoradio
---
template: other_parties_help
subject: |
  **How do I know if there are others?**
content: |  
    % if user_ask_role == 'plaintiff':
    You said you are the **Plaintiff** or the **Petitioner.** The other people on your side of the case would be co-plaintiffs or co-petitioners.
    % else:
    You said you are the **Defendant** or the **Respondent.** The other people on your side of the case would be co-defendants or co-respondents.
    % endif
---
depends on:
  - user_started_case
sets:
  - users[i].name.first
id: other users names
question: |
  % if al_form_type in ['starts_case','existing_case','appeal']:
  What is the name of the ${ ordinal(i) } person who is part of the case with you?
  % else:
  What is the name of the ${ ordinal(i) } person who is adding their name to
  this form with you?
  % endif
subquestion: |
  ${ collapse_template(long_name_help) }
fields:
  - code: |
      users[i].name_fields(person_or_business='unsure')
---
template: long_name_help
subject: |
  **What if I need more space?**
content: |
  If the party has a long name like "Jane Smith, Director of Housing," select **Business or organization**. You can then enter the full name and title.
---
# modified other opposing parties question
# add to basic questions
id: any other opposing parties
question: |
  % if users==plaintiffs:
  Is there another **defendant** or **respondent** in this case?
  % else:
  Is there another **plaintiff** or **petitioner** in this case?
  % endif
subquestion: |
  % if user_ask_role == 'plaintiff':
  You said you are the **Plaintiff** or the **Petitioner.** The people on the other side of the case would be defendants or respondents.
  % else:
  You said you are the **Defendant** or the **Respondent.** The people on the other side of the case would be plaintiffs or petitioners.
  % endif

  % if len(other_parties.elements) >= 1:  
  So far you have told us about ${other_parties.full_names()}.
  % endif
fields:
  - "Anyone else?": other_parties.there_is_another
    datatype: yesnoradio
---
depends on:
  - user_started_case
sets:
  - other_parties[i].name.first
id: names of opposing parties
question: |
  % if users==plaintiffs:
  Name of ${ ordinal(i) } **defendant** or **respondent** in this case
  % else:
  Name of ${ ordinal(i) } **plaintiff** or **petitioner** in this case
  % endif
subquestion: |
  ${ collapse_template(long_name_help) }
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='unsure')
---
id: trial court county
continue button field: case_county
question: |
  In which county was this case filed?
fields:
  - County: trial_court_index
    datatype: integer
    code: |
      court_county_lookup()
---
code: |
  def court_county_lookup(lowercase=False):
    all_court_counties = court_list._load_courts()['address_county'].items()
    filtered_courts = [(-1, "cook")] if lowercase else [(-1, "Cook")]
    for court in all_court_counties:
      if court[1] != "Cook":
        court_name = court[1].lower() if lowercase else court[1]
        filtered_courts.append((court[0],court_name))
    return sorted( filtered_courts, key=lambda y: y[1])
---
depends on:
  - trial_court_index
code: |
  if trial_court_index == -1:
    trial_court = court_list.as_court('trial_court', 15)
    trial_court.address.county = "Cook"
  else:
    trial_court = court_list.as_court('trial_court', trial_court_index)
---
id: case number
question: |
  What is the case number?
subquestion: |
  ${ collapse_template(case_number_help) }  
fields:
  - Case number: case_number
    maxlength: 19
---
template: case_number_help
subject: |
  **Where can I find this?**
content: |  
  The case number should be on your court papers. Look at the Complaint or Petition, or the Summons if you received one. It is usually in the top-right part of the first page.
  
  If you started the case, the court clerk should have given you the case number.
  
  In this example, the case number is **2022 EXAMPLE 123**.
  
  [FILE case_number_example.png, 100%, Summons form showing case number]
---
id: your contact information
question: |
  What is your contact information?
subquestion: |
  The court or other parties might need to contact you about this case.

  **This information will appear on your court forms.**
  
  If you do not want to list a phone number on your forms, leave it blank.

  If you have an email address, you must list it. Be sure to check your email daily, otherwise you may miss important court documents or information about your case.

  ${ collapse_template(contact_info_help) }  
fields:  
  - Phone number: users[0].phone_number
    datatype: al_international_phone
    required: False
  - label: |
      Do you have an email address?
    field: users[0].has_email_address      
    datatype: yesnoradio
  - note: |
      This email address will appear on your court forms. Be sure to check 
      this email daily, otherwise you may miss important information about 
      your case.
    show if:
      variable: users[0].has_email_address
      is: True
  - Email address: users[0].email    
    datatype: email
    show if: 
      variable: users[0].has_email_address
      is: True
---
template: contact_info_help
subject: |
  **What if I don't want to list my email address?**
content: |  
  If you do not want to enter your personal email address, you can create a new email account to get email about your case.
  
  To make a new email account try one of these email services:
  
  * [**Gmail**](https://accounts.google.com/SignUp)
  * [**Outlook**](https://outlook.live.com/owa/?nlp=1&signup=1)
  * [**Yahoo**](https://login.yahoo.com/account/create?.lang=en-US&.intl=us)
---
id: e-signature
question: |
  Do you want to add your e-signature to your forms?
subquestion: |
  This program can put “**/s/ ${users[0].name_full()}**” where you would sign your name. The court will accept this as your signature.

  If you do not add your **{e-signature}**, you must sign your paper forms before you file and deliver them.

  <div class="alert alert-info ilao-info" role="alert">
    <h6 class="alert-heading">What it means to sign your <em>Proof of Delivery</em></h6>
    <p>By signing your <em>Proof of Delivery</em> forms, you are certifying that:</p>
    <p><ul>
      <li>Everything on the forms is true and correct, or you have been informed or believe it to be true and correct, and</li>
      <li>You understand that making a false statement on the form is perjury and has penalties provided by law.</li>
    </ul></p>
  <p>See the <a href="https://www.ilga.gov/legislation/ilcs/documents/073500050k1-109.htm"><b>Code of Civil Procedure, 735 ILCS 5/1-109</b></a> for more information.</p>
  </div>
fields:
  - "Add e-signature?": e_signature
    datatype: yesnoradio
terms:
  - "e-signature": |
      An e-signature is an electronic signature. It is a digital version of a signature that has the same effect as a hand-written signature. 
---
reconsider: True
code: |
  delivery_parties = ALPeopleList("delivery_parties", elements = other_parties + users[1:])
# changed to ALPeopleList to use full_names()
---
id: delivery intro
continue button field: delivery_intro
question: |
  Send your forms to all other parties
subquestion: |
  These are the other parties in this case: ${delivery_parties.full_names()}.

  You must send a copy of your forms to each of them.

  If someone in the case has a lawyer, send the forms to their lawyer.
---
id: has lawyer
generic object: ALIndividual
question: |
  Does ${ x.name_full() } have a lawyer in this case?
field: x.is_represented
choices:
  - Yes: True
  - No: False
  - I don't know: null 
# note: null will be None in review screen
---
id: add lawyer
sets:
  - x.lawyer.name.first
generic object: ALIndividual
question: |
  Who is  ${ x.name_full() }'s lawyer?
subquestion: |
  If the court papers list a law firm instead of a person's name, select **Business or organization** and enter the law firm name. Otherwise, select **Person** and enter the name of the lawyer.
fields:
  - code: |
      x.lawyer.name_fields(person_or_business='unsure')


---
id: knows delivery method
generic object: ALIndividual
question: |
  % if x.is_represented:
  Do you know **how** and **when** you will send your forms to ${ x.lawyer.name_full() }?
  % else:
  Do you know **how** and **when** you will send your forms to ${ x.name_full() }?
  % endif
subquestion: |
  ${ collapse_template(delivery_method_help) }  

  For best results, complete the Proof of Delivery section and send the forms today.

  If you do not know this now, you can add it to the Proof of Delivery section of your forms later.
field: x.knows_delivery_method
choices:
  - Yes: True
  - No. I do not know this now. I will add it to my forms later.: False
---
template: delivery_method_help
subject: |
  **What are my delivery options?**
content: |  
  You can deliver the forms by:
  
  * Email,
  * The court's **{e-filing system}**,
  * US mail or a delivery company (like UPS or FedEx), or
  * Hand delivery to the party, the party's family member over 13 at their residence, the party's lawyer, or their lawyer's office.

  You must send your forms electronically (by email or through the e-filing system) if you and the person you are sending forms to have an email address. If you or the person you are sending to do not have an email address, or if you have permission from the judge, you may send forms by mail, through a delivery company, or by hand-delivery.
  
  If you are in a prison or jail, you can deliver by mail.
terms:
  - e-filing system: |
      The court's e-filing system could be any approved electronic filing service provider (EFSP).
---
id: all party delivery method
sets:
  - x.email_delivery
  - x.efm_delivery
  - x.physical_delivery
generic object: ALIndividual
question: |
  % if x.is_represented:
  How will you send your forms to ${ x.lawyer.name_full() }?
  % else:
  How will you send your forms to ${ x.name_full() }?
  % endif
subquestion: |
  You must send your forms electronically (by email or through the e-filing system) if you and the person you are sending forms to have an email address. If you or the person you are sending to do not have an email address, or if you have permission from the judge, you may send forms by mail, through a delivery company, or by hand-delivery.

  For best results, complete the Proof of Delivery section and send the forms today.

  **Note:** If you do not know this now, be sure to add it to the Proof of Delivery section of your forms later.

  ${ collapse_template(efiling_help) }  
fields:
  - Email: x.email_delivery
    datatype: yesnowide
  - Email address (for direct email delivery): x.delivery_email
    datatype: email
    js show if: 
      val("x.email_delivery") == true
    required: False
  - E-filing system: x.efm_delivery
    datatype: yesnowide
    help: |
      The court's e-filing system could be any approved electronic filing service provider (EFSP).
  - Email address (for delivery thru the e-filing system): x.delivery_efsp_email
    datatype: email
    js show if: 
      val("x.efm_delivery") == true
    required: False
  - "US mail, a delivery company (like UPS or FedEX), or in-person by hand-delivery": x.physical_delivery
    datatype: yesnowide
  - note: |
      Where will you deliver the paper forms to?
    js show if: 
      val("x.physical_delivery") == true
  - Street address: x.address.address
    address autocomplete: True
    js show if: 
      val("x.physical_delivery") == true
    required: False
  - Address line 2: x.address.unit
    js show if: 
      val("x.physical_delivery") == true
    required: False
  - City: x.address.city
    js show if: 
      val("x.physical_delivery") == true
    required: False
  - State: x.address.state
    code: |
      states_list()
    js show if: 
      val("x.physical_delivery") == true
    required: False
  - ZIP code: x.address.zip
    js show if: 
      val("x.physical_delivery") == true
    required: False
  - note: |
      How will you deliver the paper forms? **Choose an option below.**  
    js show if: 
      val("x.physical_delivery") == true
  - I will send by **US mail or a delivery company** (like UPS or FedEx).: x.mail_delivery
    datatype: yesnowide
    js show if:
      val("x.physical_delivery") == true
    required: False
  - Address or intersection of mailbox or delivery company: x.delivery_mail_address
    maxlength: 40
    js show if: 
      val("x.physical_delivery") == true && val("x.mail_delivery") == true
    required: False
  - City of mailbox or delivery company: x.delivery_mail_city
    maxlength: 30
    js show if: 
      val("x.physical_delivery") == true && val("x.mail_delivery") == true
    required: False
  - State of mailbox or delivery company: x.delivery_mail_state
    code: |
      states_list()
    js show if: 
      val("x.physical_delivery") == true && val("x.mail_delivery") == true
    required: False
  - "I will **hand-deliver** paper forms. **Note:** You can only deliver to the party, the party's family member over 13 at their residence, the party's lawyer, or their lawyer's office.": x.hand_delivery
    datatype: yesnowide
    js show if: 
      val("x.physical_delivery") == true      
    required: False
  - I will send the forms by mail from a **prison or jail**.: x.jail_delivery
    datatype: yesnowide
    js show if: 
      val("x.physical_delivery") == true
    required: False
  - note: |
      Enter prison or jail information
    js show if: 
      val("x.physical_delivery") == true && val("x.jail_delivery") == true
  - Name of prison or jail: x.delivery_jail_name
    maxlength: 40
    js show if: 
      val("x.physical_delivery") == true && val("x.jail_delivery") == true
    required: False
  - Street address: x.jail_delivery_address.address
    address autocomplete: True
    js show if: 
      val("x.physical_delivery") == true && val("x.jail_delivery") == true
    required: False
  - Address line 2: x.jail_delivery_address.unit
    js show if: 
      val("x.physical_delivery") == true && val("x.jail_delivery") == true
    required: False
  - City: x.jail_delivery_address.city
    js show if: 
      val("x.physical_delivery") == true && val("x.jail_delivery") == true
    required: False
  - State: x.jail_delivery_address.state
    code: |
      states_list()
    js show if: 
      val("x.physical_delivery") == true && val("x.jail_delivery") == true
    required: False
  - ZIP code: x.jail_delivery_address.zip
    js show if: 
      val("x.physical_delivery") == true && val("x.jail_delivery") == true
    required: False
---
template: efiling_help
subject: |
  **What if I need help sending my forms electronically?**
content: |  
  If you need help delivering by email or using the e-filing system, you can visit a [**Legal Self-Help Center**](https://www.illinoislegalaid.org/get-legal-help/lshc-directory) or you can call, chat, or text a Court Guide at [**Illinois Court Help**](https://www.ilcourthelp.gov) or 833-411-1121.
---
---
id: delivery time
generic object: ALIndividual
question: |
  % if x.is_represented:
  When will you send your forms to ${ x.lawyer.name_full() }?
  % else:
  When will you send your forms to ${ x.name_full() }?
  % endif
subquestion: |
  For best results, complete the Proof of Delivery section and send the forms today.

  **Note:** If you do not know this now, be sure to add it to your forms later.
fields:
  - Date: x.delivery_date
    datatype: date
    required: False
    max: ${ today().plus(years=1) }
  - Time: x.delivery_time
    datatype: time
    required: False
validation code: |
  if (not showifdef('x.delivery_date')):
    x.knows_delivery_date = False
  else:
    x.knows_delivery_date = True
  if (not showifdef('x.delivery_time')):
    x.knows_delivery_time = False
  else:
    x.knows_delivery_time = True
---
id: hand delivery info
continue button field: hand_delivery_info
question: |
  Complete the delivery section of your forms
subquestion: |
  **Don't forget!** Make sure you review and complete the delivery section of your forms for each party.
  
  [FILE proof_of_delivery_snip_sep_2025.png, 100%, Proof of Delivery section of forms]

  **Instructions when delivering your forms by hand:**

  * If a party in your case does not have a lawyer, you can hand-deliver the forms to them or to a family member who is 13 or older at their home.
  * If they do have a lawyer, you can hand-deliver the forms to the lawyer or to the lawyer's office.
---
id: forms assembling
continue button field: forms_assembling
question: |
  Almost done
subquestion: |
  After you click **Next**, it may take a few moments to finish making your forms.
  
  ###### You do not need to refresh your screen. Hang in there!
  
  [NEWLINE]
---
id: get docs screen
event: get_docs_screen
question: |
  Download
subquestion: |
  
  Your forms are ready. View and download your forms below. Click **:edit: Make changes** to fix any mistakes.

  This program **does not file** your *Proof of Delivery* with the court or deliver it to other parties in your case. You will need to do this yourself. Learn about [**e-filing in Illinois**](https://www.illinoiscourts.gov/eservices/information-for-filers-without-lawyers).

  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }
  
  ${ al_user_bundle.download_list_html() }

  [NEWLINE]

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  **Note:** This program **does not file** your *Proof of Delivery* with the court or deliver it to other parties in your case. Learn about [**e-filing in Illinois**](https://www.illinoiscourts.gov/eservices/information-for-filers-without-lawyers).
  
  Thank you for using ILAO Easy Forms!
under: |
  % if not user_logged_in():
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} **Sign-in**](${url_of('login', next=interview_url())}) or [**create**](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif 

  &nbsp;
  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=current_context().question_id, easy_form_variable=current_context().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
generic object: ALDocumentBundle
template: x.send_email_template
subject: |
  Proof of Delivery forms
content: |
  Your forms are attached.
  
  Thanks for using ILAO Easy Forms!
  
  [Illinois Legal Aid Online](https://www.illinoislegalaid.org)
---
objects:
  - proof_of_delivery: ALDocument.using(title="Proof of Delivery", filename="proof_of_delivery.pdf", has_addendum=False)
  - instructions: ALDocument.using(title="Instructions", filename="instructions.pdf", has_addendum=False)
---
#This needs to be a generic object because the delivery parties list entries point to entries in other lists.
generic object: ALIndividual
objects:
  - x.additional_proof: ALDocument.using(title="Additional Proof of Delivery", filename="additional_proof_of_delivery.pdf", has_addendum=False)
---
objects:
  - additional_delivery_bundle: ALDocumentBundle.using(elements=[], title= "Additional Proof of Delivery", filename="additional_proof_of_delivery.pdf", has_addendum=False)
---
reconsider: True
code: |
  #deliveries_to_bundle will be used as the elements for the additional_delivery_bundle object created in the above block. This is its initial definition for the Appearance.
  deliveries_to_bundle = []
  additional_delivery_bundle.enabled = False

  #enumerate allows us to reference the index in a for loop. This for loop appends each additional proof template to the deliveries_to_bundle object and sets the enabled trait for those templates.
  for index, party in enumerate(delivery_parties):
    #If the index is 0, the party is included on the main form, and thus does not need to be added to additional proof of delivery
    if index == 0:
      party.additional_proof.enabled = False
    #Sep 2025 update: Any index > 0 must go to an additional proof of delivery form
    elif index > 0:
      party.additional_proof.enabled = True
      additional_delivery_bundle.enabled = True
      deliveries_to_bundle.append(party.additional_proof)

  additional_delivery_bundle.elements = deliveries_to_bundle
  refresh_delivery_bundle = True
---
code: |
  proof_of_delivery.enabled = True
  instructions.enabled = True
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[instructions, proof_of_delivery_single_pdf_bundle], filename="proof_of_delivery.pdf", title="All forms")
  - al_court_bundle: ALDocumentBundle.using(elements=[instructions, proof_of_delivery_single_pdf_bundle], filename="proof_of_delivery.pdf", title="All forms")
---
objects:
  - proof_of_delivery_single_pdf_bundle: ALDocumentBundle.using(elements=[proof_of_delivery, additional_delivery_bundle], filename="proof_of_delivery.pdf", title="Proof of Delivery", enabled=True)
---
attachment:
  variable name: instructions[i]
  name: instructions
  filename: instructions
  skip undefined: True
  editable: False
  pdf template file: pod_instructions.pdf
  fields:
      - "fake": ${ "" }
---
attachment:
  variable name: proof_of_delivery[i]
  name: proof_of_delivery
  filename: proof_of_delivery
  skip undefined: True
  editable: False
  pdf template file: proof_of_delivery.pdf
  fields:
      - "trial_court_county": ${ trial_court.address.county.upper() }
      - "plaintiffs": |
          % if in_re_check:
          ${ in_re_label }
          % else:
          % if user_ask_role == 'plaintiff':
          % if users.number() > 1:
          ${ users[0].name_full() }, et al.
          % else:
          ${ users[0].name_full() }
          % endif
          % else:
          % if other_parties.number() > 1:
          ${ other_parties[0].name_full() }, et al.
          % else:
          ${ other_parties[0].name_full() }
          % endif
          % endif
          % endif
      
      - "defendants": |
          % if in_re_check:
          ${ "" }
          % else:
          % if user_ask_role == 'plaintiff':
          ${ other_parties.full_names() } 
          % else:
          ${ users.full_names() }
          % endif
          % endif

      - "user__1": ${ users[0].name_full() }
      - "user__2": ${ users[0].name_full() }
      - "user_mail_address_one_line__1": ${ users[0].address.on_one_line(bare=True) }
      - "user_phone_number__1": ${ phone_number_formatted(users[0].phone_number) }
      - "user_email": ${ users[0].email if users[0].has_email_address else '' }
      - "case_number__1": ${ case_number }
      - "case_number__2": ${ case_number }
      
      - "e_sign_name__1": ${ users[0].name_full() if e_signature else '' }
      - "for_self": ${True}
      - "document_name": ${document_name}

      - "delivery_party1_name_full": | 
          % if delivery_parties[0].is_represented:
          ${ delivery_parties[0].lawyer.name_full() } (lawyer for ${ delivery_parties[0].name_full() })
          % else:
          ${ delivery_parties[0].name_full() }
          % endif
      - "delivery_party1_mail_address_on_one_line": ${ delivery_parties[0].address.on_one_line(bare=True) }
      - "delivery_party1_email": ${ delivery_parties[0].delivery_email if delivery_parties[0].knows_delivery_method else '' }
      - "delivery_party1_email_efsp": ${ delivery_parties[0].delivery_efsp_email if delivery_parties[0].knows_delivery_method else '' }
      - "is_delivery_party1_hand_yes": ${ delivery_parties[0].hand_delivery if delivery_parties[0].knows_delivery_method and delivery_parties[0].physical_delivery else '' }
      - "is_delivery_party1_mail_yes": ${ delivery_parties[0].mail_delivery if delivery_parties[0].knows_delivery_method and delivery_parties[0].physical_delivery else '' }
      - "is_delivery_party1_efm_yes": ${ delivery_parties[0].efm_delivery if delivery_parties[0].knows_delivery_method else '' }
      - "is_delivery_party1_email_yes": ${ delivery_parties[0].email_delivery if delivery_parties[0].knows_delivery_method else '' }
      - "delivery_party1_date": ${ delivery_parties[0].delivery_date if delivery_parties[0].knows_delivery_method and delivery_parties[0].knows_delivery_date else '' }
      - "delivery_party1_time": ${ format_time(delivery_parties[0].delivery_time, format='h:mm a') if delivery_parties[0].knows_delivery_method and delivery_parties[0].knows_delivery_time else '' }
      
      - "is_delivery_party1_not_electronic": ${ True if delivery_parties[0].knows_delivery_method and delivery_parties[0].physical_delivery else '' }
      - "delivery_party1_mail_location": |
          % if delivery_parties[0].knows_delivery_method and delivery_parties[0].physical_delivery and delivery_parties[0].mail_delivery:
          % if delivery_parties[0].delivery_mail_address != "" and delivery_parties[0].delivery_mail_city != "" and delivery_parties[0].delivery_mail_state != "":
          ${delivery_parties[0].delivery_mail_address }, ${delivery_parties[0].delivery_mail_city}, ${ state_name(delivery_parties[0].delivery_mail_state) }
          % elif delivery_parties[0].delivery_mail_address != "" and delivery_parties[0].delivery_mail_city != "":
          ${delivery_parties[0].delivery_mail_address }, ${delivery_parties[0].delivery_mail_city}
          % elif delivery_parties[0].delivery_mail_address != "" and delivery_parties[0].delivery_mail_state != "":
          ${delivery_parties[0].delivery_mail_address }, ${ state_name(delivery_parties[0].delivery_mail_state) }
          % elif delivery_parties[0].delivery_mail_city != "" and delivery_parties[0].delivery_mail_state != "":
          ${delivery_parties[0].delivery_mail_city}, ${ state_name(delivery_parties[0].delivery_mail_state) }
          % elif delivery_parties[0].delivery_mail_address != "":
          ${delivery_parties[0].delivery_mail_address}
          % elif delivery_parties[0].delivery_mail_city != "":
          ${delivery_parties[0].delivery_mail_city}
          % else:
          ${state_name(delivery_parties[0].delivery_mail_state)}
          % endif
          % else:
          ${ "" }
          % endif
      - "is_delivery_party1_jail_yes": ${ True if delivery_parties[0].knows_delivery_method and delivery_parties[0].physical_delivery and delivery_parties[0].jail_delivery else '' }
      - "delivery_party1_jail_name": |
          % if delivery_parties[0].knows_delivery_method and delivery_parties[0].physical_delivery and delivery_parties[0].jail_delivery:
          % if delivery_parties[0].delivery_jail_name != "" and delivery_parties[0].jail_delivery_address.address != "" and delivery_parties[0].jail_delivery_address.city != "" and delivery_parties[0].jail_delivery_address.state != "":
          ${ delivery_parties[0].delivery_jail_name }, ${ delivery_parties[0].jail_delivery_address.on_one_line(bare=True)}
          % elif delivery_parties[0].delivery_jail_name == "":
          ${ delivery_parties[0].jail_delivery_address.on_one_line(bare=True)}
          % else:
          ${ delivery_parties[0].delivery_jail_name }
          % endif
          % else:
          ${""}
          % endif

---
generic object: ALIndividual
attachment:
  variable name: x.additional_proof[i]
  name: additional_proof
  filename: additional_proof
  skip undefined: True
  editable: False
  pdf template file: additional_proof_of_delivery.pdf
  fields:
      - "trial_court_county": ${ trial_court.address.county }
      - "plaintiffs": |
          % if in_re_check:
          ${ in_re_label }
          % else:
          % if user_ask_role == 'plaintiff':
          % if users.number() > 1:
          ${ users[0].name_full() }, et al.
          % else:
          ${ users[0].name_full() }
          % endif
          % else:
          % if other_parties.number() > 1:
          ${ other_parties[0].name_full() }, et al.
          % else:
          ${ other_parties[0].name_full() }
          % endif
          % endif
          % endif
      
      - "defendants": |
          % if in_re_check:
          ${ "" }
          % else:
          % if user_ask_role == 'plaintiff':
          ${ other_parties.full_names() } 
          % else:
          ${ users.full_names() }
          % endif
          % endif      
      - "user__1": ${ users[0].name_full() }
      - "user__2": ${ users[0].name_full() }
      - "user_mail_address_one_line__1": ${ users[0].address.on_one_line(bare=True) }
      - "user_phone_number__1": ${ phone_number_formatted(users[0].phone_number) }
      - "user_email": ${ users[0].email if users[0].has_email_address else '' }
      - "case_number__1": ${ case_number }
      - "case_number__2": ${ case_number }
      - "e_sign_name__1": ${ users[0].name_full() if e_signature else '' }
      - "for_self": ${True}
      - "document_name": ${ document_name }

      - "delivery_party1_name_full": | 
          % if x.is_represented:
          ${ x.lawyer.name_full() } (lawyer for ${ x.name_full() })
          % else:
          ${ x.name_full() }
          % endif
      - "delivery_party1_mail_address_on_one_line": ${ x.address.on_one_line(bare=True) }
      - "delivery_party1_email": ${ x.delivery_email if x.knows_delivery_method else '' }
      - "delivery_party1_email_efsp": ${ x.delivery_efsp_email if x.knows_delivery_method else '' }
      - "is_delivery_party1_hand_yes": ${ x.hand_delivery if x.knows_delivery_method and x.physical_delivery else '' }
      - "is_delivery_party1_mail_yes": ${ x.mail_delivery if x.knows_delivery_method and x.physical_delivery else '' }
      - "is_delivery_party1_efm_yes": ${ x.efm_delivery if x.knows_delivery_method else '' }
      - "is_delivery_party1_email_yes": ${ x.email_delivery if x.knows_delivery_method else '' }
      - "delivery_party1_date": ${ x.delivery_date if x.knows_delivery_method and x.knows_delivery_date else '' }
      - "delivery_party1_time": ${ format_time(x.delivery_time, format='h:mm a') if x.knows_delivery_method and x.knows_delivery_time else '' }
      
      - "is_delivery_party1_not_electronic": ${ True if x.knows_delivery_method and x.physical_delivery else '' }
      - "delivery_party1_mail_location": |
          % if x.knows_delivery_method and x.physical_delivery and x.mail_delivery:
          % if x.delivery_mail_address != "" and x.delivery_mail_city != "" and x.delivery_mail_state != "":
          ${x.delivery_mail_address }, ${x.delivery_mail_city}, ${ state_name(x.delivery_mail_state) }
          % elif x.delivery_mail_address != "" and x.delivery_mail_city != "":
          ${x.delivery_mail_address }, ${x.delivery_mail_city}
          % elif x.delivery_mail_address != "" and x.delivery_mail_state != "":
          ${x.delivery_mail_address }, ${ state_name(x.delivery_mail_state) }
          % elif x.delivery_mail_city != "" and x.delivery_mail_state != "":
          ${x.delivery_mail_city}, ${ state_name(x.delivery_mail_state) }
          % elif x.delivery_mail_address != "":
          ${x.delivery_mail_address}
          % elif x.delivery_mail_city != "":
          ${x.delivery_mail_city}
          % else:
          ${state_name(x.delivery_mail_state)}
          % endif
          % else:
          ${ "" }
          % endif
      - "is_delivery_party1_jail_yes": ${ True if x.knows_delivery_method and x.physical_delivery and x.jail_delivery else '' }
      - "delivery_party1_jail_name": |
          % if x.knows_delivery_method and x.physical_delivery and x.jail_delivery:
          % if x.delivery_jail_name != "" and x.jail_delivery_address.address != "" and x.jail_delivery_address.city != "" and x.jail_delivery_address.state != "":
          ${ x.delivery_jail_name }, ${ x.jail_delivery_address.on_one_line(bare=True)}
          % elif x.delivery_jail_name == "":
          ${ x.jail_delivery_address.on_one_line(bare=True)}
          % else:
          ${ x.delivery_jail_name }
          % endif
          % else:
          ${""}
          % endif

############### Review pages
---
id: review screen
event: review_answers
question: |
  Review screen
subquestion: |
  Edit your answers below.
review: 
  - Edit: document_name
    button: |
      **Name of documents you are delivering:**
      ${ document_name }
  - Edit: user_ask_role
    button: |
      % if user_ask_role == "plaintiff":
        **Your role:** Plaintiff or Petitioner
      % else:
        **Your role:** Defendant or Respondent
      % endif
  - Edit: users.revisit
    button: |
      **Your party: (Edit to change name, lawyer, address, and delivery info)**

      % for my_var in users:
        * ${ my_var.name_full() }
      % endfor
  - Edit: other_parties.revisit
    button: |
      **The other party: (Edit to change name, lawyer, address, and delivery info)**

      % for my_var in other_parties:
        * ${ my_var.name_full() }
      % endfor
  - Edit: in_re_check
    button: |
      **Does the court case have "In re:" in the name?**  
      ${word(yesno(in_re_check))}
  - Edit: in_re_label
    button: |
      **In re:** ${in_re_label}
    show if: in_re_check
  - Edit: 
      - trial_court_index
      - recompute:
        - trial_court
    button: |
      **County where this case is filed:**
      ${ trial_court.address.county }
  - Edit: case_number
    button: |
      **Case number:**
      ${ case_number }  
  - Edit: users[0].address.address
    button: |
      **Your address:**
      ${ users[0].address.on_one_line(bare=True) }
  - Edit: users[0].phone_number
    button: |
      **Your phone number:**
      ${ phone_number_formatted(users[0].phone_number) }
  - Edit: users[0].has_email_address
    button: |
      **Do you have an email address?**
      ${ word(yesno(users[0].has_email_address)) }
  - Edit: users[0].email
    button: |
      **Your email:**
      ${ users[0].email }
    show if: users[0].has_email_address
  - Edit: e_signature
    button: |
      **Do you want to add your e-signature to your forms?**
      ${ word(yesno(e_signature)) }
---
#needs: yes_no_unknown
id: delivery party review screen
section: Parties and delivery
continue button field: x.review_delivery
generic object: ALIndividual
question: |
  Edit ${ x.name_full() }'s information
subquestion: |  
  % if x == users[0]:
  Edit your address, phone number, and email address in the [**About you**](${ url_action('section_about_you') }) section.
  % else:
  If you don't see lawyer, address, or delivery information, then it might not be entered yet. Continue the program to answer all the questions.
  % endif
review: 
  - Edit: x.name.first
    button: |
      **Party name:**
      ${ x.name_full()  }
  - Edit: x.is_represented
    button: |
      **Does ${ x.name_full() } have a lawyer?**
      % if x.is_represented is None:
      I don't know
      % else:
      ${ word(yesno(x.is_represented)) }
      % endif
  - Edit: x.lawyer.name.first
    button: |
      **Lawyer name:**
      ${ x.lawyer.name_full() }
    show if: x.is_represented
  - Edit: x.address.address
    button: |
      % if x.is_represented == True:
      **${ x.lawyer.name_full() }'s address:**
      % else:
      **${ x.name_full() }'s address:**
      % endif
      ${ x.address.on_one_line(bare=True) }
  - Edit: x.knows_delivery_method
    button: |
      **Do you know how you will deliver your forms to them?**
      ${ word(yesno(x.knows_delivery_method)) }
  - Edit: x.hand_delivery
    button: |
      **Delivery by: (Edit to view and change details)**
      
      % if x.efm_delivery == True:
        * E-filing system
      % endif
      % if x.email_delivery == True:
        * Email
      % endif
      % if x.mail_delivery == True:
        * US mail or delivery company
      % endif
      % if x.hand_delivery == True:
        * Hand delivery
      % endif
      % if x.jail_delivery == True:
        * Mail from prison or jail
      % endif
    show if: x.knows_delivery_method
  - Edit: x.delivery_date
    button: |
      **Delivery on:**
      ${ x.delivery_date } at ${ format_time(x.delivery_time, "h:mm a") }
    show if: x.knows_delivery_method
---
id: users review screen
continue button field: users.revisit
section: Case info
question: |
  Edit the ${ user_ask_role }s
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name_full() if defined("row_item.name.first") else ""
  - Party, lawyer, address, and delivery info: |
      action_button_html(url_action(row_item.attr_name("review_delivery")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: other parties review screen
continue button field: other_parties.revisit
section: Case info
question: |
  % if user_ask_role == "plaintiff":
    Edit the defendants
  % else:
    Edit the plaintiffs
  % endif
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name_full() if defined("row_item.name.first") else ""
  - Party, lawyer, address, and delivery info: |
      action_button_html(url_action(row_item.attr_name("review_delivery")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
section: Case info
id: case info review screen
event: section_case_info
question: |
  Case info
subquestion: |
  Edit your answers below.
review: 
  - Edit: document_name
    button: |
      **Name of documents you are delivering:**
      ${ document_name }
  - Edit: user_ask_role
    button: |
      % if user_ask_role == "plaintiff":
        **Your role:** plaintiff or petitioner
      % else:
        **Your role:** defendant or respondent
      % endif
  - Edit: users.revisit
    button: |
      **Your party: (Edit to change name, lawyer, address, and delivery info)**

      % for my_var in users:
        * ${ my_var.name_full() }
      % endfor
  - Edit: other_parties.revisit
    button: |
      **The other party: (Edit to change name, lawyer, address, and delivery info)**

      % for my_var in other_parties:
        * ${ my_var.name_full() }
      % endfor
  - Edit: in_re_check
    button: |
      **Does the court case have "In re:" in the name?**  
      ${word(yesno(in_re_check))}
  - Edit: in_re_label
    button: |
      **In re:** ${in_re_label}
    show if: in_re_check
  - Edit: 
      - trial_court_index
      - recompute:
        - trial_court
    button: |
      **County where this case is filed:**
      ${ trial_court.address.county }
  - Edit: case_number
    button: |
      **Case number:**
      ${ case_number }   
---
section: Parties and delivery
id: delivery info review screen
event: section_parties
question: |
  Parties and delivery
subquestion: |
  Edit your answers below.
review:
  - Edit: users.revisit
    button: |
      **Your party: (Edit to change name, lawyer, address, and delivery info)**

      % for my_var in users:
        * ${ my_var.name_full() }
      % endfor
  - Edit: other_parties.revisit
    button: |
      **The other party: (Edit to change name, lawyer, address, and delivery info)**

      % for my_var in other_parties:
        * ${ my_var.name_full() }
      % endfor
  - Edit: e_signature
    button: |
      **Do you want to add your e-signature to your forms?**
      ${ word(yesno(e_signature)) }

---
section: About you
id: about you review screen
event: section_about_you
question: |
  About you
subquestion: |
  Edit your answers below.
review:
  - Edit: users[0].name.first
    button: |
      **Your name:**
      ${ users[0].name_full() }
  - Edit: users[0].address.address
    button: |
      **Your address:**
      ${ users[0].address.on_one_line(bare=True) }
  - Edit: users[0].phone_number
    button: |
      **Your phone number:**
      ${ phone_number_formatted(users[0].phone_number) }
  - Edit: users[0].has_email_address
    button: |
      **Do you have an email address?**
      ${ word(yesno(users[0].has_email_address)) }
  - Edit: users[0].email
    button: |
      **Your email:**
      ${ users[0].email }
    show if: users[0].has_email_address
  - Edit: e_signature
    button: |
      **Do you want to add your e-signature to your forms?**
      ${ word(yesno(e_signature)) }